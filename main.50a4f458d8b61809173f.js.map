{"version":3,"sources":["webpack:///./js/task-11-1.js","webpack:///./js/task-11-2.js","webpack:///./js/task-11-3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAMMA,EAAQ,SAAAC,GACd,OAAO,IAAIC,SACV,SAAAC,GAAaC,YAAW,WAAQD,EAAQF,KAAQA,OAI3CI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCbXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAoBnBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIb,SAAQ,SAAAC,GACfA,EAAQW,EAASE,KAAI,SAAAC,GAAI,OACrBA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAMnEZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAK7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCJnC,IAIMe,EAAkB,SAAAC,GACtB,OAAO,IAAInB,SAAQ,SAACC,EAASmB,GAC3B,IAN+BC,EAAKC,EAM9BxB,GANyBuB,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMlDnB,YAAW,WACUqB,KAAKE,SAAW,IAGjCxB,EAAQ,CAAEyB,GAAIP,EAAYO,GAAItB,KAAMN,IAGtCsB,EAAOD,EAAYO,MAClB5B,OAID6B,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAItB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8CtB,EAA9C,QAGIwB,EAAW,SAAAF,GACfrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAKFR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,K","file":"main.50a4f458d8b61809173f.js","sourcesContent":["// Задание 1\r\n// Напиши функцию delay(ms), которая возвращает промис,\r\n// переходящий в состояние \"resolved\" через ms миллисекунд.\r\n// Значением исполнившегося промиса должно быть то кол - во миллисекунд\r\n// которое передали во время вызова функции delay.\r\n\r\nconst delay = ms => {\r\nreturn new Promise(\r\n resolve => { setTimeout(() => { resolve(ms); }, ms); }\r\n );\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\n\r\n","// Задание2\r\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback - функцию callback,\r\n// а принимала всего два параметра allUsers и userName и возвращала промис.\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\n// Было \r\n// const toggleUserState = (allUsers, userName, callback) => {\r\n//   const updatedUsers = allUsers.map(user =>\r\n//     user.name === userName ? { ...user, active: !user.active } : user,\r\n//   );\r\n\r\n//   callback(updatedUsers);\r\n// };\r\n\r\n// const logger = updatedUsers => console.table(updatedUsers);\r\n\r\n// /*\r\n//  * Сейчас работает так\r\n//  */\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise(resolve => {\r\n        resolve(allUsers.map(user =>\r\n            user.name === userName ? { ...user, active: !user.active } : user,\r\n        )\r\n  );\r\n});\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","// Задание 3\r\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback - функции\r\n// onSuccess и onError, а принимала всего один параметр transaction и возвращала промис :\r\n\r\n// const randomIntegerFromInterval = (min, max) => {\r\n//   return Math.floor(Math.random() * (max - min + 1) + min);\r\n// };\r\n\r\n// const makeTransaction = (transaction, onSuccess, onError) => {\r\n//   const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//   setTimeout(() => {\r\n//     const canProcess = Math.random() > 0.3;\r\n\r\n//     if (canProcess) {\r\n//       onSuccess(transaction.id, delay);\r\n//     } else {\r\n//       onError(transaction.id);\r\n//     }\r\n//   }, delay);\r\n// };\r\n\r\n// const logSuccess = (id, time) => {\r\n//   console.log(`Transaction ${id} processed in ${time}ms`);\r\n// };\r\n\r\n// const logError = id => {\r\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n// };\r\n\r\n// /*\r\n//  * Работает так\r\n//  */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n      }\r\n\r\n      reject(transaction.id);\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time} ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}